{
    "contents" : "#Begin by loading the Oligo package -- our main tool for analyzing Affy array data\nlibrary(oligo)\n\n#read in the raw .CEL files (will take ~5-10min)\nrawData <- read.celfiles(list.celfiles())\nrawData\n\n#normalize using RMA (will take <5min)\nnormData <- rma(rawData, target=\"core\") #you have the option of seeting target=\"full\" or \"extended\" if working with Exon arrays\nnormData\n\n#choose color scheme for graphs\ncols <- topo.colors (n=84, alpha=1)\n\n## make different plots of non-normalized data: histogram and boxplot are most useful: others include density, pairs, MAplot, sampleRelation\nsampleLabels <- read.delim(\"Bale_sampleLabels.txt\", sep=\"\\t\", fill=TRUE, header=FALSE, as.is=TRUE)\nsampleLabels <- as.character(t(sampleLabels))\nhist(rawData, xlab = \"log2 expression\", main = \"non-normalized data - histograms\", col=cols)\nboxplot(rawData, names = sampleLabels, ylab = \"non-normalized log2 expression\", main = \"non-normalized data - boxplots\", col=cols)\n#pairs(rawData)\n#MAplot(rawData)\n\n###############################################################################################\n#filter out control probes\n################################################################################################\n#all of Affy's Gene ST arrays have many control probes that can make output files confusing\n#One option is to remove these first using the 'getMainProbes' function from the affycoretools package\nlibrary(affycoretools)\nnormData.main <- getMainProbes(normData)\n#now extract the expression data from the eset filtered eset object you just created\nnormData.main.matrix <- exprs(normData.main)\ndim(normData.main.matrix\n\n#an additional filtering step can be carried out using the 'nsFilter' function \n#allows you to filter out low variance data, as well as the control probes mentioned above\nlibrary(genefilter)\n#first, swap the annotation slot in the normData object\nannotation(normData) <- \"mogene20sttranscriptcluster.db\"\nfiltered_geneList <- nsFilter(normData, var.func=IQR, var.filter=TRUE, var.cutoff=0.5, filterByQuantile=TRUE, feature.exclude=\"^AFFX\")\n\nhead(filtered_geneList)\n# extract the ExpressionSet from this filtered list.  If you started with an expression set object, then you would pick up at this point and skip the nsFilter step\nfiltered.eset <- filtered_geneList$eset\nhead(filtered.eset)\ndim(filtered.eset)\n\n#now convert to a datamatrix that will contain only the probes after filtering\nfiltered.matrix <- as.matrix(filtered.eset)\nprobeList <- rownames(filtered.matrix)\n\n###############################################################################################\n#Annotate your data\n################################################################################################\nlibrary(annotate)\n#the pd.mogene.2.0.st maps probes to probesets during the normalization/summarization step\nlibrary(pd.mogene.2.0.st)\n#the mogene20sttranscriptcluster.db package maps probesets to genes in the annotation step\nlibrary(mogene20sttranscriptcluster.db)\n#If we want to know what kinds of data are retriveable via the 'select' command, look at the columns of the annotation database\ncolumns(mogene20sttranscriptcluster.db)\n#If we want to know what kinds of fields we could potentially use as keys to query the database, use the 'keytypes' command\nkeytypes(mogene20sttranscriptcluster.db)\n\n#first, annotate you unfiltered data\nmyAnnot.main <- select(mogene20sttranscriptcluster.db, keys=rownames(normData.main.matrix), keytype=\"PROBEID\", columns=c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"))\nresultTable.main <- merge(myAnnot.main, normData.main.matrix, by.x=\"PROBEID\", by.y=0)\nhead(resultTable.main)\n#now annotate the variance filtered data\nmyAnnot <- select(mogene20sttranscriptcluster.db, keys=rownames(filtered.matrix), keytype=\"PROBEID\", columns=c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"))\nresultTable.filtered <- merge(myAnnot, filtered.matrix, by.x=\"PROBEID\", by.y=0)\nhead(resultTable.filtered)\n#add more appropriate sample names as column headers\ncolnames(resultTable.main) <- sampleLabels\ncolnames(resultTable.filtered) <- sampleLabels\n\n#now write these annotated datasets out\nwrite.table(resultTable.main, \"normalizedUnfiltered.txt\", sep=\"\\t\", quote=FALSE)\nwrite.table(resultTable.filtered, \"normalizedFiltered.txt\", sep=\"\\t\", quote=FALSE)\n",
    "created" : 1433470901195.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "496206105",
    "id" : "D8A53985",
    "lastKnownWriteTime" : 1433209783,
    "path" : "~/Downloads/Step1_preprocessAffy.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}