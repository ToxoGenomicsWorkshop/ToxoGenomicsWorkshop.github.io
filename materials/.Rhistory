install.packages("dplyr")
install.packages("knitr")
install.packages("ggplot2")
setRepositories()
install.packages("limma")
install.packages(c("limma", "lumi", "oligo", "dplyr", "ggplot2", "knitr"))
install.packages(c("limma", "lumi", "methylumi", "lumiHumanAll.db", "lumiMouseAll.db", "lumiHumanIDMapping", "lumiMouseIDMapping", "Annotate", "biomart", "oligo", "dplyr", "stringr", "reshape2", "sqldf", "biostrings", "GenomicRanges", "RColorbrewer", "ggplot2", "ggbio", "heatmap.2", "heatmap.3", "heatplus", "heatmap.plus", "knitr", "RCharts", "RCircus", "DESeq2", "EdgeR", "ChipPeakAnno", "Vegan", "Phyloseq", "HMP", "ROCR"))
install.packages("igraph")
install.packages("scatterplot3d")
save.image()
getwd()
X = 5
Y = 10
x * Y
x <- 45
y <- 13
x*y
library("limma")
package?limma
??limma
?limma
help(limma)
?limma
?decideTests
limma?
library("limma")
detach("package:limma", unload=TRUE)
library("limma", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?limma
?decideTest
?decideTests
1 + 5
answer <- 1+5
answer2 <- 1 + 5
answer
answer2
class(answer)
dim(answer)
library(reshape2)
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Git/ToxoGenomicsWorkshop.github.io/materials")
source("http://bioconductor.org/biocLite.R")
install.packages("vegan")
setwd("~/Git/ToxoGenomicsWorkshop.github.io/materials")
#This script carries out the steps involved in analysis of RNAseq data.
source("http://bioconductor.org/biocLite.R")
biocLite(pkgs=c("Rsubread", "limma", "edgeR", "ShortRead", "ggvis", "ggplot2", "reshape2", "dplyr"))
library(Rsubread)
library(limma)
library(edgeR)
library(ShortRead)
options(digits=2)
options(digits=2)
targets <- read.delim("studyDesign.txt", row.names=NULL)
View(targets)
targets
groups <- factor(paste(targets$strain, targets$stage, sep="."))
groups
sampleLabels <- paste(targets$strain, targets$stage, targets$rep, sep=".")
sampleLabels
design <- model.matrix(~0+groups)
colnames(design) <- levels(groups)
design
setwd("~/Git/ToxoGenomicsWorkshop.github.io/materials")
load("DGEList")
DGEList
myGeneIDs <- DGEList$genes$GeneID
myGeneIDs
normData.unfiltered <- voom(DGEList, design, plot=TRUE)
normData.unfiltered
exprs.unfiltered <- normData.unfiltered$E
#note that because you're now working with Log2 CPM, much of your data will be negative number (log2 of number smaller than 1 is negative)
head(exprs.unfiltered)
rpkm.unfiltered <- rpkm(DGEList, DGEList$genes$Length)
rpkm.unfiltered <- log2(rpkm.unfiltered + 0.5)
dim(rpkm.unfiltered)
cpm.matrix.filtered <- rowSums(cpm(DGEList) > 10) >= 2
DGEList.filtered <- DGEList[cpm.matrix.filtered,]
dim(DGEList.filtered)
normData.filtered <- voom(DGEList.filtered, design, plot=TRUE)
exprs.filtered <- normData.filtered$E
#note that because you're now working with Log2 CPM, much of your data will be negative number (log2 of number smaller than 1 is negative)
head(exprs.filtered)
rpkm.filtered <- rpkm(DGEList.filtered, DGEList.filtered$genes$Length) #if you prefer, can use 'cpm' instead of 'rpkm' here
rpkm.filtered <- log2(rpkm.filtered + 0.5)
cols.ALL <- topo.colors(n=18, alpha=1)
cols.ALL
hist(exprs.filtered, xlab = "log2 expression", main = "normalized data - histograms", col=cols.ALL)
boxplot(exprs.filtered, ylab = "normalized log2 expression", main = "non-normalized data - boxplots", col=cols.ALL)
distance <- dist(t(exprs.filtered),method="maximum") # options for computing distance matrix are: "euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski".
clusters <- hclust(distance, method = "average") #options for clustering method: "ward", "single", "complete", "average", "mcquitty", "median" or "centroid".
plot(clusters, label=sampleLabels)
pca.res <- prcomp(t(exprs.filtered), scale.=F, retx=T)
ls(pca.res)
summary(pca.res) # Prints variance summary for all principal components.
head(pca.res$rotation) #$rotation shows you how much each GENE influenced each PC (callled 'eigenvalues', or loadings)
head(pca.res$x) #$x shows you how much each SAMPLE influenced each PC (called 'scores')
plot(pca.res, las=1)
pc.var<-pca.res$sdev^2 #sdev^2 gives you the eigenvalues
pc.per<-round(pc.var/sum(pc.var)*100, 1)
pc.per
#make some graphs to visualize your PCA result
library(ggplot2)
#lets first plot any two PCs against each other
#turn your scores for each gene into a data frame
data.frame <- as.data.frame(pca.res$x)
ggplot(data.frame, aes(x=PC1, y=PC2, colour=factor(groups))) +
geom_point(size=5) +
theme(legend.position="right")
library(reshape2)
melted <- cbind(groups, melt(pca.res$x[,1:3]))
#look at your 'melted' data
ggplot(melted) +
geom_bar(aes(x=Var1, y=value, fill=groups), stat="identity") +
facet_wrap(~Var2)
###############################################################################################
tooltip <- function(data, ...) {
paste0("<b>","Symbol: ", data$geneID, "</b><br>",
"RH.tachy.AVG: ", data$RH.tachy.AVG, "<br>",
"CTG.tachy.AVG: ", data$CTG.tachy.AVG)
}
#plot the interactive graphic
myData %>%
ggvis(x= ~RH.tachy.AVG, y= ~CTG.tachy.AVG, key := ~geneID) %>%
layer_points(fill = ~CTG.vs.RH.tachy) %>%
add_tooltip(tooltip)
library(ggplot2)
library(dplyr)
library(ggvis)
tooltip <- function(data, ...) {
paste0("<b>","Symbol: ", data$geneID, "</b><br>",
"RH.tachy.AVG: ", data$RH.tachy.AVG, "<br>",
"CTG.tachy.AVG: ", data$CTG.tachy.AVG)
}
#plot the interactive graphic
myData %>%
ggvis(x= ~RH.tachy.AVG, y= ~CTG.tachy.AVG, key := ~geneID) %>%
layer_points(fill = ~CTG.vs.RH.tachy) %>%
add_tooltip(tooltip)
exprs.filtered.dataframe <- as.data.frame(exprs.filtered)
colnames(exprs.filtered.dataframe)
head(exprs.filtered.dataframe)
colnames(exprs.filtered.dataframe) <- sampleLabels
geneID <- rownames(exprs.filtered.dataframe)
#use the dplyr 'mutate' command to get averages and fold changes for all your replicates
myData <- mutate(exprs.filtered.dataframe,
#insert columns that average your replicates
RH.tachy.AVG = (RH.tachy.rep1 + RH.tachy.rep2 + RH.tachy.rep3)/2,
PLK.tachy.AVG = (PLK.tachy.rep1 + PLK.tachy.rep2 + PLK.tachy.rep3)/2,
CTG.tachy.AVG = (CTG.tachy.rep1 + CTG.tachy.rep2 + CTG.tachy.rep3)/2,
RH.brady.AVG = (RH.brady.rep1 + RH.brady.rep2 + RH.brady.rep3)/2,
PLK.brady.AVG = (PLK.brady.rep1 + PLK.brady.rep2 + PLK.brady.rep3)/2,
CTG.brady.AVG = (CTG.brady.rep1 + CTG.brady.rep2 + CTG.brady.rep3)/2,
#now add fold-change columns based on the averages calculated above
PLK.vs.RH.tachy = (PLK.tachy.AVG - RH.tachy.AVG),
CTG.vs.RH.tachy = (CTG.tachy.AVG - RH.tachy.AVG),
PLK.vs.CTG.tachy = (PLK.tachy.AVG - CTG.tachy.AVG),
brady.vs.tachy.RH = (RH.brady.AVG - RH.tachy.AVG),
brady.vs.tachy.PLK = (PLK.brady.AVG - PLK.tachy.AVG),
brady.vs.tachy.CTG = (CTG.brady.AVG - CTG.tachy.AVG),
geneID)
#take a look at your new spreadsheet
head(myData)
#use dplyr "arrange" and "select" functions to sort by LogFC column of interest (arrange)
#and then display only the columns of interest (select) to see the most differentially expressed genes
myData.sort <- myData %>%
arrange(desc(brady.vs.tachy.PLK)) %>%
select(geneID, PLK.tachy.AVG, PLK.brady.AVG)
head(myData.sort)
#use dplyr "filter" and "select" functions to pick out genes of interest (filter)
#and again display only columns of interest (select)
#filter based on specific Toxo gene IDs
myData.filter <- myData %>%
filter(geneID=="TGME49_207130" | geneID=="TGME49_208130") %>%
select(geneID, PLK.tachy.AVG, PLK.brady.AVG)
head(myData.filter)
#filtering based on expression level or fold change
myData.filter <- myData %>%
filter((abs(PLK.vs.RH.tachy) >= 1) |
(abs(CTG.vs.RH.tachy) >= 1) |
(abs(PLK.vs.CTG.tachy) >= 1))%>%
select(geneID, RH.tachy.AVG, PLK.tachy.AVG, CTG.tachy.AVG)
head(myData.filter)
#create a basic scatterplot using ggplot
ggplot(myData, aes(x=RH.tachy.AVG, y=CTG.tachy.AVG)) +
geom_point(shape=1) +
geom_point(size=4)
#define a tooltip that shows gene symbol and Log2 expression data when you mouse over each data point in the plot
tooltip <- function(data, ...) {
paste0("<b>","Symbol: ", data$geneID, "</b><br>",
"RH.tachy.AVG: ", data$RH.tachy.AVG, "<br>",
"CTG.tachy.AVG: ", data$CTG.tachy.AVG)
}
#plot the interactive graphic
myData %>%
ggvis(x= ~RH.tachy.AVG, y= ~CTG.tachy.AVG, key := ~geneID) %>%
layer_points(fill = ~CTG.vs.RH.tachy) %>%
add_tooltip(tooltip)
